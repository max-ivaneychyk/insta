{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["toPromise","func","_len","arguments","length","other","Array","_key","Promise","resolve","reject","args","concat","apply","Object","toConsumableArray","Post","_ref","media_type","media_url","caption","children","comments","permalink","react_default","a","createElement","className","src","alt","controls","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","posts","loadPosts","bind","assertThisInitialized","setState","_this2","FB","window","getLoginStatus","response","then","res","status","login","Error","r","authResponse","accessToken","token","api","profilesList","data","profiles","promises","map","profile","id","toString","fields","all","instagramBusinessAccounts","account","instagram_business_account","instagramAccountsIdList","dataCollection","options","forEach","collection","push","media","onPushPosts","Posts","post","assign","key","scope","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba837a74.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nfunction toPromise(func, ...other) {\n\n   return new Promise((resolve, reject) => {\n      let args = [...other, resolve];\n      func(...args);\n   })\n}\n\n\nfunction Post({media_type, media_url, caption, children, comments, permalink }) {\n\n   return (\n      <div className=\"post-wrap\">\n         { media_type === 'IMAGE' &&  <img src={media_url} alt={\"Im\"} className=\"post-image\" /> }\n         { media_type === 'VIDEO' &&  <video src={media_url} alt={\"Im\"} className=\"post-image\" controls /> }\n      </div>\n   )\n}\n\n\n\nclass App extends Component {\n\n   constructor (props) {\n      super(props);\n\n      this.state = {posts: []};\n\n      this.loadPosts = this.loadPosts.bind(this);\n   }\n\n   onPushPosts (posts) {\n      this.setState({\n         posts: [...this.state.posts, ...posts]\n      });\n   }\n\n   loadPosts() {\n      let FB = window.FB;\n\n      FB.getLoginStatus(response => {\n\n         Promise.resolve(response)\n            .then(res => {\n\n               if (res.status === \"connected\") {\n                  return res;\n               }\n\n               return new Promise((resolve, reject) => {\n                  FB.login(resolve);\n               });\n            })\n            .then(res => {\n\n               if (res.status !== \"connected\") {\n                 throw new Error('Cant auth');\n               }\n\n               return res;\n            })\n            .then(r => r.authResponse.accessToken)\n            .then(token => toPromise(FB.api, 'me/accounts', 'get', {}))\n            .then(profilesList => {\n               return [profilesList.data[1], profilesList.data[2]]\n            })\n            .then(profiles => {\n               let promises =\n                  profiles.map(profile => {\n                     return toPromise(FB.api, profile.id.toString(), 'get', {'fields': 'instagram_business_account'})\n                  })\n\n               return Promise.all(promises);\n            })\n            .then(instagramBusinessAccounts => instagramBusinessAccounts.map(account => account.instagram_business_account.id))\n            .then(instagramAccountsIdList => {\n               let promises = instagramAccountsIdList.map(id => toPromise(FB.api, `${id}/media`, 'get', {}))\n\n               return Promise.all(promises)\n            })\n            .then(dataCollection => {\n               let data = [];\n               let options = {\n                  fields: 'id,media_type,media_url,owner,timestamp,like_count,caption,children,comments,permalink,shortcode,username'\n               };\n\n               dataCollection.forEach(collection => data.push( ...collection.data) )\n\n               return Promise.all(data.map(media => {\n                  return toPromise(FB.api, media.id, 'get', options)\n               }));\n            })\n            .then(posts => this.onPushPosts(posts));\n      })\n   }\n\n   render() {\n      let {posts} = this.state;\n      let Posts = posts.map(post => (<Post {...post} key={post.id.toString()} /> ));\n\n      return (\n         <div className=\"App\">\n            <button scope=\"public_profile,email,manage_pages,instagram_basic\"\n                    onClick={this.loadPosts}>\n\n               Load Posts\n            </button>\n\n            {Posts}\n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}